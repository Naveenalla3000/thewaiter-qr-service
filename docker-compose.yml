services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qrservice-app
    ports:
      - "5050:5050"
    depends_on:
      - mongo-qr-service
      - kafka
    environment:
      - PORT=5050
      - DOMAIN=http://localhost
      - S3_BUCKET=waitercaller-s3-bucket
      - S3_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=AKIA4KLKZCHSJI4UJZJS
      - AWS_SECRET_ACCESS_KEY=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
      - AWS_DEFAULT_REGION=us-east-1
      - MONGO_URI=mongodb://admin:password@mongo-qr-service:27017
      - MONGO_DB_NAME=waitercaller
      - MONGO_QR_COLLECTION=qr_codes
      - KAFKA_SERVER=kafka:9092
      - KAFKA_TOPIC=waiter-topic
    networks:
      - qrservice-network

  mongo-qr-service:
    image: mongo:latest
    container_name: mongo-qr-service
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONOG_INITDB_DATABASE: waitercaller
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - qrservice-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - qrservice-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - qrservice-network

networks:
  qrservice-network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
